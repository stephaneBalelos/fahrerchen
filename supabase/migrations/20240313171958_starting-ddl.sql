-- Custom types
create type public.app_permission as enum (
  'users.read',
  'users.update',
  'users.delete',
  'organisations.read',
  'organisations.update',
  'organisations.delete',
  'organisation_members.read',
  'organisation_members.update',
  'organisation_members.delete',
  'students.read',
  'students.create',
  'students.update',
  'students.delete',
  'courses.read',
  'courses.create',
  'courses.update',
  'courses.delete'
);
create type public.app_role as enum ('owner','manager', 'teacher', 'student' );
create type public.user_status as enum ('ONLINE', 'OFFLINE');
create type public.lesson_type as enum ('THEORY', 'PRACTICE', 'EXAM', 'OTHER');

-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
alter table public.role_permissions enable row level security;

-- USERS
create table public.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  email       text not null unique,
  firstname    text,
  lastname    text,
  status      user_status default 'OFFLINE'::public.user_status
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';

alter table public.users enable row level security;


-- ORGANISATION
create table public.organisations (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  name          text not null,
  owner_id      uuid references public.users not null
);
comment on table public.organisations is 'Organisation data.';

alter table public.organisations enable row level security;


-- ORGANISATION MEMBERS
create table public.organisation_members (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  organisation_id    uuid references public.organisations not null,
  user_id    uuid references public.users not null,
  role     app_role not null,
  unique (organisation_id, user_id)
);
comment on table public.organisation_members is 'Members of each organisation, users can be in multiple organisations.';

alter table public.organisation_members enable row level security;

-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user, per organisation.';


create table public.students (
  id          uuid default uuid_generate_v4() primary key,
  email       text not null unique,
  firstname    text not null,
  lastname    text not null,
  birth_date   date not null,
  organisation_id    uuid references public.organisations on delete cascade not null
);
comment on table public.students is 'Profile data for each student.';

alter table public.students enable row level security;


-- COURSES
create table public.courses (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  description       text,
  organisation_id    uuid references public.organisations on delete cascade not null
);
comment on table public.courses is 'COURSES AVAILABLE.';

alter table public.courses enable row level security;


-- COURSES SUBSCRIPTIONS
create table public.courses_subscription (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  description       text,
  course_id    uuid references public.courses on delete cascade not null,
  user_id    uuid references public.users on delete cascade not null 
);
comment on table public.courses is 'COURSES AVAILABLE.';



create function public.handle_new_user() 
returns trigger as $$
declare org_id uuid;
declare role_name public.app_role;
begin
  insert into public.users (id, email)
  values (new.id, new.email);

  org_id := new.raw_user_meta_data ->> 'orgid';
  role_name := (new.raw_user_meta_data ->> 'role')::public.app_role;

  if new.raw_user_meta_data ->> 'orgid' is null then
    org_id := extensions.uuid_generate_v4();
    insert into public.organisations (id, name, owner_id)
    values (org_id, 'My Org', new.id);
    return new;
  end if;

  -- if role is provided, insert into organisation_members
  if role_name is not null then
    insert into public.organisation_members (organisation_id, user_id, role)
    values (org_id, new.id, role_name);
  end if;

  return new;
end;
$$ language plpgsql security definer set search_path = auth, public;
-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();



create function public.handle_new_organisation() 
returns trigger as $$
declare org_id uuid;
begin

  insert into public.organisation_members (organisation_id, user_id, role)
  values (new.id, new.owner_id, 'owner');

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a Org is created
create trigger on_org_created
  after insert on public.organisations
  for each row execute procedure public.handle_new_organisation();


-- Helpers Functions
create or replace function public.authorize(
  requested_permission app_permission,
  org_id uuid
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Fetch user role once and store it to reduce number of calls
  select role into user_role from public.organisation_members where organisation_id = org_id and user_id = auth.uid() limit 1;

  if user_role is null then
    return false;
  end if;

  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
    and role_permissions.role = user_role;

  return bind_permissions > 0;
end;
$$ language plpgsql security definer set search_path = '';


-- Policies
create policy "Everyone can see users" on public.users for select to authenticated using (true);
create policy "User can see update their own data" on public.users for update to authenticated using (auth.uid() = id);

create policy "Everyone member can see organisations" on public.organisations for select to authenticated using (public.authorize('organisations.read', id));
insert into public.role_permissions (role, permission) values ('owner', 'organisations.read');
insert into public.role_permissions (role, permission) values ('manager', 'organisations.read');
insert into public.role_permissions (role, permission) values ('teacher', 'organisations.read');
insert into public.role_permissions (role, permission) values ('student', 'organisations.read');

create policy "Owner can see update organisations" on public.organisations for update to authenticated using ((auth.uid() = owner_id) or (public.authorize('organisations.update', id)));
insert into public.role_permissions (role, permission) values ('owner', 'organisations.update');

create policy "Every Member can see organisation_members" on public.organisation_members for select to authenticated using (public.authorize('organisation_members.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'organisation_members.read');
insert into public.role_permissions (role, permission) values ('manager', 'organisation_members.read');
insert into public.role_permissions (role, permission) values ('teacher', 'organisation_members.read');
insert into public.role_permissions (role, permission) values ('student', 'organisation_members.read');

create policy "Owner can update organisation_members" on public.organisation_members for update to authenticated using (public.authorize('organisation_members.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'organisation_members.update');

create policy "Everyone except students can see students" on public.students for select to authenticated using (public.authorize('students.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.read');
insert into public.role_permissions (role, permission) values ('manager', 'students.read');
insert into public.role_permissions (role, permission) values ('teacher', 'students.read');

create policy "Owner & Manager can insert students" on public.students for insert to authenticated with check (public.authorize('students.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.create');
insert into public.role_permissions (role, permission) values ('manager', 'students.create');

create policy "Owner & Manager can update students" on public.students for update to authenticated using (public.authorize('students.update', organisation_id)) with check (public.authorize('students.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.update');
insert into public.role_permissions (role, permission) values ('manager', 'students.update');

create policy "Owner & Manager can delete students" on public.students for delete to authenticated using (public.authorize('students.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.delete');
insert into public.role_permissions (role, permission) values ('manager', 'students.delete');

create policy "Everyone can see courses" on public.courses for select to authenticated using (public.authorize('courses.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.read');
insert into public.role_permissions (role, permission) values ('manager', 'courses.read');
insert into public.role_permissions (role, permission) values ('teacher', 'courses.read');
insert into public.role_permissions (role, permission) values ('student', 'courses.read');

create policy "Owner, Manager can insert courses" on public.courses for insert to authenticated with check (public.authorize('courses.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.create');
insert into public.role_permissions (role, permission) values ('manager', 'courses.create');

create policy "Owner & Manager can update courses" on public.courses for update to authenticated using (public.authorize('courses.update', organisation_id)) with check (public.authorize('courses.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.update');
insert into public.role_permissions (role, permission) values ('manager', 'courses.update');

create policy "Owner & Manager can delete courses" on public.courses for delete to authenticated using (public.authorize('courses.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.delete');












-- Todo: Add the following to another migration file

-- Create a view to show the user's roles
create view public.user_roles_view as 
select 
  users.id,
  users.email,
  users.firstname,
  users.lastname,
  user_roles.role as role
from public.users
join public.user_roles on users.id = user_roles.user_id;

-- /**
--  * REALTIME SUBSCRIPTIONS
--  * Only allow realtime listening on public tables.
--  */

-- begin; 
--   -- remove the realtime publication
--   drop publication if exists supabase_realtime; 

--   -- re-create the publication but don't enable it for any tables
--   create publication supabase_realtime;  
-- commit;

-- -- add tables to the publication
-- alter publication supabase_realtime add table public.organisations;
-- alter publication supabase_realtime add table public.courses;
-- alter publication supabase_realtime add table public.users;

-- /**
--  * HELPER FUNCTIONS
--  * Create test user helper method.
--  */
-- create or replace function public.create_user(
--     email text
-- ) returns uuid
--     security definer
--     set search_path = auth
-- as $$
--   declare
--   user_id uuid;
-- begin
--   user_id := extensions.uuid_generate_v4();
  
--   insert into auth.users (id, email)
--     values (user_id, email)
--     returning id into user_id;

--     return user_id;
-- end;
-- $$ language plpgsql;


-- -- authorize with role-based access control (RBAC)
-- create function public.authorize(
--   requested_permission app_permission
-- )
-- returns boolean as $$
-- declare
--   bind_permissions int;
-- begin
--   select count(*)
--   from public.role_permissions
--   where role_permissions.permission = authorize.requested_permission
--     and role_permissions.role = (auth.jwt() ->> 'user_role')::public.app_role
--   into bind_permissions;
  
--   return bind_permissions > 0;
-- end;
-- $$ language plpgsql security definer set search_path = public;

-- -- Secure the tables
-- alter table public.users enable row level security;
-- alter table public.organisations enable row level security;
-- alter table public.courses enable row level security;
-- alter table public.user_roles enable row level security;
-- alter table public.role_permissions enable row level security;
-- create policy "Allow logged-in read access" on public.users for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.users for insert with check ( auth.uid() = id );
-- create policy "Allow individual update access" on public.users for update using ( auth.uid() = id );
-- create policy "Allow logged-in read access" on public.organisations for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.organisations for insert with check ( auth.uid() = created_by );
-- create policy "Allow individual delete access" on public.organisations for delete using ( auth.uid() = created_by );
-- create policy "Allow authorized delete access" on public.organisations for delete using ( authorize('organisations.delete') );
-- create policy "Allow logged-in read access" on public.courses for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.courses for insert with check ( auth.uid() = user_id );
-- create policy "Allow individual update access" on public.courses for update using ( auth.uid() = user_id );
-- create policy "Allow individual delete access" on public.courses for delete using ( auth.uid() = user_id );
-- create policy "Allow authorized delete access" on public.courses for delete using ( authorize('courses.delete') );
-- create policy "Allow individual read access" on public.user_roles for select using ( auth.uid() = user_id );

-- -- Send "previous data" on change 
-- alter table public.users replica identity full; 
-- alter table public.organisations replica identity full; 
-- alter table public.courses replica identity full;

-- -- inserts a row into public.users and assigns roles
