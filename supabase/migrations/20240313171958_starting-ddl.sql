-- Custom types
create type public.app_permission as enum (
  'users.read',
  'users.update',
  'users.delete',
  'organisations.read',
  'organisations.update',
  'organisations.delete',
  'organisation_members.read',
  'organisation_members.update',
  'organisation_members.delete',
  'students.read',
  'students.create',
  'students.update',
  'students.delete',
  'courses.read',
  'courses.create',
  'courses.update',
  'courses.delete',
  'course_subscriptions.read',
  'course_subscriptions.create',
  'course_subscriptions.update',
  'course_subscriptions.delete',
  'course_requirements.read',
  'course_requirements.create',
  'course_requirements.update',
  'course_requirements.delete',
  'course_activities.read',
  'course_activities.create',
  'course_activities.update',
  'course_activities.delete',
  'course_activity_schedules.read',
  'course_activity_schedules.create',
  'course_activity_schedules.update',
  'course_activity_schedules.delete',
  'course_activity_attendances.read',
  'course_activity_attendances.create',
  'course_activity_attendances.update',
  'course_activity_attendances.delete',
  'course_subscription_bills.read',
  'course_subscription_bills.create',
  'course_subscription_bills.update',
  'course_subscription_bills.delete'
);
create type public.app_role as enum ('owner','manager', 'teacher', 'student' );
create type public.user_status as enum ('ONLINE', 'OFFLINE');
create type public.requirements_types as enum ('THEORY', 'PRACTICE', 'EXAM', 'OTHER');
create type public.schedule_type as enum ('ONCE', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY');

-- enum for fÃ¼hrerscheinklassen
create type public.course_type as enum ('AM', 'A1', 'A2', 'A', 'B', 'BE', 'C1', 'C1E', 'C', 'CE', 'D1', 'D1E', 'D', 'DE', 'L', 'T');


-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
alter table public.role_permissions enable row level security;

-- COURSE TYPES
create table public.course_types (
  id           bigint generated by default as identity primary key,
  type         course_type unique not null,
  description  text not null
);
comment on table public.course_types is 'Course types available.';
alter table public.course_types enable row level security;

-- COURSE REQUIREMENTS TYPES
create table public.course_requirements_types (
  id           bigint generated by default as identity primary key,
  type         requirements_types unique not null,
  name         text not null,
  description  text not null
);
comment on table public.course_requirements_types is 'Course requirements types available.';
alter table public.course_requirements_types enable row level security;

-- USERS
create table public.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  email       text not null unique,
  firstname    text,
  lastname    text,
  fullname    text generated always as (coalesce(firstname, '') || ' ' || coalesce(lastname, '')) stored,
  status      user_status default 'OFFLINE'::public.user_status
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';

alter table public.users enable row level security;


-- ORGANISATION
create table public.organisations (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  name          text not null,
  owner_id      uuid references public.users not null
);
comment on table public.organisations is 'Organisation data.';

alter table public.organisations enable row level security;


-- ORGANISATION MEMBERS
create table public.organisation_members (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  organisation_id    uuid references public.organisations not null,
  user_id    uuid references public.users not null,
  role     app_role not null,
  unique (organisation_id, user_id)
);
comment on table public.organisation_members is 'Members of each organisation, users can be in multiple organisations.';

alter table public.organisation_members enable row level security;

-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user, per organisation.';


create table public.students (
  id          uuid default uuid_generate_v4() primary key,
  email       text not null unique,
  firstname    text not null,
  lastname    text not null,
  birth_date   date not null,
  organisation_id    uuid references public.organisations on delete cascade not null
);
comment on table public.students is 'Profile data for each student.';

alter table public.students enable row level security;


-- COURSES
create table public.courses (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  name          text not null,
  description       text not null,
  type         integer references public.course_types not null,
  organisation_id    uuid references public.organisations on delete cascade not null,
  unique (organisation_id, type)
);
comment on table public.courses is 'COURSES AVAILABLE.';

alter table public.courses enable row level security;

-- COURSES SUBSCRIPTIONS
create table public.course_subscriptions (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  course_id    uuid references public.courses on delete cascade not null,
  student_id    uuid references public.students on delete cascade not null,
  archived_at   timestamp with time zone default null,
  organisation_id    uuid references public.organisations on delete cascade not null,
  costs        integer default 0 not null check (costs >= 0),
  unique (course_id, student_id)
);
comment on table public.course_subscriptions is 'COURSES AVAILABLE.';

alter table public.course_subscriptions enable row level security;


create table public.course_subscription_bills (
  id            uuid default uuid_generate_v4() primary key,
  course_subscription_id    uuid references public.course_subscriptions on delete cascade not null,
  amount        integer default 0 not null check (amount >= 0),
  paid_at       timestamp with time zone default null,
  organisation_id    uuid references public.organisations on delete cascade not null,
  unique (course_subscription_id)
);
comment on table public.course_subscription_bills is 'COURSE SUBSCRIPTION BILLS.';

alter table public.course_subscription_bills enable row level security;

create table public.course_requirements (
  id            uuid default uuid_generate_v4() primary key,
  course_id    uuid references public.courses on delete cascade not null,
  requirements_type  integer references public.course_requirements_types not null,
  name          text not null,
  description   text,
  required     integer not null,
  organisation_id    uuid references public.organisations on delete cascade not null
);
comment on table public.course_requirements is 'COURSE REQUIREMENTS.';

alter table public.course_requirements enable row level security;

create table public.course_activities (
  id            uuid default uuid_generate_v4() primary key,
  course_id    uuid references public.courses on delete cascade not null,
  name          text not null,
  description   text not null,
  requirement_id    uuid references public.course_requirements on delete cascade,
  price        integer default 0 not null check (price >= 0),
  organisation_id    uuid references public.organisations on delete cascade not null
);
comment on table public.course_activities is 'COURSE ACTIVITIES.';

alter table public.course_activities enable row level security;

create table public.course_activity_schedules (
  id            uuid default uuid_generate_v4() primary key,
  activity_id    uuid references public.course_activities on delete cascade not null,
  assigned_to   uuid references public.organisation_members on delete set null,
  organisation_id    uuid references public.organisations on delete cascade not null,
  start_at     timestamp with time zone not null,
  end_at       timestamp with time zone not null,
  hour        integer check (hour >= 0 and hour <= 23),
  minute      integer check (minute >= 0 and minute <= 59),
  day_of_week integer[] not null,
  day         integer check (day >= 1 and day <= 31),
  month       integer check (month >= 1 and month <= 12),
  year        integer check (year >= 2021 and year <= 2100),
  repeat      schedule_type default 'ONCE'::public.schedule_type not null
);
comment on table public.course_activity_schedules is 'ACTIVITY SCHEDULES.';

alter table public.course_activity_schedules enable row level security;

create table public.course_activity_attendances (
  id            uuid default uuid_generate_v4() primary key,
  course_activity   uuid references public.course_activities on delete cascade not null,
  supervisor_id    uuid references public.organisation_members on delete set null,
  activity_schedule_id    uuid references public.course_activity_schedules on delete set null,
  course_subscription_id    uuid references public.course_subscriptions on delete cascade not null,
  course_id    uuid references public.courses on delete cascade not null,
  student_id    uuid references public.students on delete cascade not null,
  attended_at   timestamp with time zone default null,
  organisation_id    uuid references public.organisations on delete cascade not null
);
comment on table public.course_activity_attendances is 'ACTIVITY ATTENDANCES.';

alter table public.course_activity_attendances enable row level security;


create function public.handle_new_user() 
returns trigger as $$
declare org_id uuid;
declare role_name public.app_role;
begin
  insert into public.users (id, email)
  values (new.id, new.email);

  org_id := new.raw_user_meta_data ->> 'orgid';
  role_name := (new.raw_user_meta_data ->> 'role')::public.app_role;

  if new.raw_user_meta_data ->> 'orgid' is null then
    org_id := extensions.uuid_generate_v4();
    insert into public.organisations (id, name, owner_id)
    values (org_id, 'My Org', new.id);
    return new;
  end if;

  -- if role is provided, insert into organisation_members
  if role_name is not null then
    insert into public.organisation_members (organisation_id, user_id, role)
    values (org_id, new.id, role_name);
  end if;

  return new;
end;
$$ language plpgsql security definer set search_path = auth, public;
-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();



create function public.handle_new_organisation() 
returns trigger as $$
declare org_id uuid;
begin

  insert into public.organisation_members (organisation_id, user_id, role)
  values (new.id, new.owner_id, 'owner');

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a Org is created
create trigger on_org_created
  after insert on public.organisations
  for each row execute procedure public.handle_new_organisation();


create function public.handle_new_course()
returns trigger as $$
declare org_id uuid;
begin
  org_id := new.organisation_id;

  insert into public.course_requirements (course_id, name, requirements_type, required, organisation_id)
  values (new.id, 'Theorie Stunden', 1, 12, org_id);
  insert into public.course_requirements (course_id, name, requirements_type, required, organisation_id)
  values (new.id, 'Praxis Stunden', 2, 12, org_id);
  insert into public.course_requirements (course_id, name, requirements_type, required, organisation_id)
  values (new.id, 'Theoretische PrÃ¼fung', 3, 1, org_id);
  insert into public.course_requirements (course_id, name, requirements_type, required, organisation_id)
  values (new.id, 'Praktische PrÃ¼fung', 3, 1, org_id);

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a course is created
create trigger on_course_created
  after insert on public.courses
  for each row execute procedure public.handle_new_course();


-- -- handle new course subscription
-- create function public.handle_new_course_subscription()
-- returns trigger as $$
-- declare org_id uuid;
-- begin
--   org_id := new.organisation_id;
--   course_id := new.course_id;

--   insert into public.course_subscription_bills (course_subscription_id, amount, organisation_id)
--   values (new.id, new.costs, org_id);

--   return new;
-- end;
-- $$ language plpgsql security definer set search_path = public;
-- -- trigger the function every time a course subscription is created
-- create trigger on_course_subscription_created
--   after insert on public.course_subscriptions
--   for each row execute procedure public.handle_new_course_subscription();



-- Helpers Functions
create or replace function public.authorize(
  requested_permission app_permission,
  org_id uuid
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Fetch user role once and store it to reduce number of calls
  select role into user_role from public.organisation_members where organisation_id = org_id and user_id = auth.uid() limit 1;

  if user_role is null then
    return false;
  end if;

  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
    and role_permissions.role = user_role;

  return bind_permissions > 0;
end;
$$ language plpgsql security definer set search_path = '';


-- Policies
create policy "Everyone can see users" on public.users for select to authenticated using (true);
create policy "User can see update their own data" on public.users for update to authenticated using (auth.uid() = id);

create policy "Everyone member can see organisations" on public.organisations for select to authenticated using (public.authorize('organisations.read', id));
insert into public.role_permissions (role, permission) values ('owner', 'organisations.read');
insert into public.role_permissions (role, permission) values ('manager', 'organisations.read');
insert into public.role_permissions (role, permission) values ('teacher', 'organisations.read');
insert into public.role_permissions (role, permission) values ('student', 'organisations.read');

create policy "Owner can see update organisations" on public.organisations for update to authenticated using ((auth.uid() = owner_id) or (public.authorize('organisations.update', id)));
insert into public.role_permissions (role, permission) values ('owner', 'organisations.update');

create policy "Every Member can see organisation_members" on public.organisation_members for select to authenticated using (public.authorize('organisation_members.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'organisation_members.read');
insert into public.role_permissions (role, permission) values ('manager', 'organisation_members.read');
insert into public.role_permissions (role, permission) values ('teacher', 'organisation_members.read');
insert into public.role_permissions (role, permission) values ('student', 'organisation_members.read');

create policy "Owner can update organisation_members" on public.organisation_members for update to authenticated using (public.authorize('organisation_members.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'organisation_members.update');

create policy "Everyone except students can see students" on public.students for select to authenticated using (public.authorize('students.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.read');
insert into public.role_permissions (role, permission) values ('manager', 'students.read');
insert into public.role_permissions (role, permission) values ('teacher', 'students.read');

create policy "Owner & Manager can insert students" on public.students for insert to authenticated with check (public.authorize('students.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.create');
insert into public.role_permissions (role, permission) values ('manager', 'students.create');

create policy "Owner & Manager can update students" on public.students for update to authenticated using (public.authorize('students.update', organisation_id)) with check (public.authorize('students.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.update');
insert into public.role_permissions (role, permission) values ('manager', 'students.update');

create policy "Owner & Manager can delete students" on public.students for delete to authenticated using (public.authorize('students.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.delete');
insert into public.role_permissions (role, permission) values ('manager', 'students.delete');

create policy "Everyone can see courses" on public.courses for select to authenticated using (public.authorize('courses.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.read');
insert into public.role_permissions (role, permission) values ('manager', 'courses.read');
insert into public.role_permissions (role, permission) values ('teacher', 'courses.read');
insert into public.role_permissions (role, permission) values ('student', 'courses.read');

create policy "Owner, Manager can insert courses" on public.courses for insert to authenticated with check (public.authorize('courses.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.create');
insert into public.role_permissions (role, permission) values ('manager', 'courses.create');

create policy "Owner & Manager can update courses" on public.courses for update to authenticated using (public.authorize('courses.update', organisation_id)) with check (public.authorize('courses.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.update');
insert into public.role_permissions (role, permission) values ('manager', 'courses.update');

create policy "Owner & Manager can delete courses" on public.courses for delete to authenticated using (public.authorize('courses.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.delete');

create policy "Everyone can see course_subscriptions" on public.course_subscriptions for select to authenticated using (public.authorize('course_subscriptions.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscriptions.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_subscriptions.read');
insert into public.role_permissions (role, permission) values ('student', 'course_subscriptions.read');

create policy "Owner, Manager can insert course_subscriptions" on public.course_subscriptions for insert to authenticated with check (public.authorize('course_subscriptions.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscriptions.create');

create policy "Owner & Manager can update course_subscriptions" on public.course_subscriptions for update to authenticated using (public.authorize('course_subscriptions.update', organisation_id)) with check (public.authorize('course_subscriptions.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscriptions.update');

create policy "Owner & Manager can delete course_subscriptions" on public.course_subscriptions for delete to authenticated using (public.authorize('course_subscriptions.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.delete');

create policy "Everyone can see course_requirements" on public.course_requirements for select to authenticated using (public.authorize('course_requirements.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_requirements.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_requirements.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_requirements.read');
insert into public.role_permissions (role, permission) values ('student', 'course_requirements.read');

create policy "Owner, Manager can insert course_requirements" on public.course_requirements for insert to authenticated with check (public.authorize('course_requirements.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_requirements.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_requirements.create');

create policy "Owner & Manager can update course_requirements" on public.course_requirements for update to authenticated using (public.authorize('course_requirements.update', organisation_id)) with check (public.authorize('course_requirements.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_requirements.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_requirements.update');

create policy "Owner can delete course_requirements" on public.course_requirements for delete to authenticated using (public.authorize('course_requirements.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_requirements.delete');


create policy "Everyone can see course_activities" on public.course_activities for select to authenticated using (public.authorize('course_activities.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_activities.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activities.read');
insert into public.role_permissions (role, permission) values ('student', 'course_activities.read');

create policy "Owner, Manager can insert course_activities" on public.course_activities for insert to authenticated with check (public.authorize('course_activities.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_activities.create');

create policy "Owner & Manager can update course_activities" on public.course_activities for update to authenticated using (public.authorize('course_activities.update', organisation_id)) with check (public.authorize('course_activities.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_activities.update');

create policy "Owner can delete course_activities" on public.course_activities for delete to authenticated using (public.authorize('course_activities.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.delete');

create policy "Everyone can see course_activity_schedules" on public.course_activity_schedules for select to authenticated using (public.authorize('course_activity_schedules.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.read');
insert into public.role_permissions (role, permission) values ('student', 'course_activity_schedules.read');

create policy "Owner, Manager & Teacher can insert course_activity_schedules" on public.course_activity_schedules for insert to authenticated with check (public.authorize('course_activity_schedules.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.create');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.create');

create policy "Owner, Manager & Teacher can update course_activity_schedules" on public.course_activity_schedules for update to authenticated using (public.authorize('course_activity_schedules.update', organisation_id)) with check (public.authorize('course_activity_schedules.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.update');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.update');

create policy "Owner, Manger % Teacher can delete course_activity_schedules" on public.course_activity_schedules for delete to authenticated using (public.authorize('course_activity_schedules.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.delete');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.delete');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.delete');


create policy "Everyone can see course_activity_attendances" on public.course_activity_attendances for select to authenticated using (public.authorize('course_activity_attendances.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_attendances.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_attendances.read');
insert into public.role_permissions (role, permission) values ('student', 'course_activity_attendances.read');

create policy "Owner, Manager can insert course_activity_attendances" on public.course_activity_attendances for insert to authenticated with check (public.authorize('course_activity_attendances.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_attendances.create');

create policy "Owner & Manager can update course_activity_attendances" on public.course_activity_attendances for update to authenticated using (public.authorize('course_activity_attendances.update', organisation_id)) with check (public.authorize('course_activity_attendances.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_attendances.update');

create policy "Owner can delete course_activity_attendances" on public.course_activity_attendances for delete to authenticated using (public.authorize('course_activity_attendances.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.delete');


create policy "Everyone can see course_subscription_bills" on public.course_subscription_bills for select to authenticated using (public.authorize('course_subscription_bills.read', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscription_bills.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_subscription_bills.read');
insert into public.role_permissions (role, permission) values ('student', 'course_subscription_bills.read');

create policy "Owner, Manager can insert course_subscription_bills" on public.course_subscription_bills for insert to authenticated with check (public.authorize('course_subscription_bills.create', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscription_bills.create');

create policy "Owner & Manager can update course_subscription_bills" on public.course_subscription_bills for update to authenticated using (public.authorize('course_subscription_bills.update', organisation_id)) with check (public.authorize('course_subscription_bills.update', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscription_bills.update');

create policy "Owner can delete course_subscription_bills" on public.course_subscription_bills for delete to authenticated using (public.authorize('course_subscription_bills.delete', organisation_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.delete');



create policy "Everyone can see course_types" on public.course_types for select to authenticated using (true);
-- EinfÃ¼gen der FÃ¼hrerscheinklassen
INSERT INTO public.course_types (type, description) VALUES
('AM', 'Leichte zweirÃ¤drige Kraftfahrzeuge mit einer HÃ¶chstgeschwindigkeit von nicht mehr als 45 km/h, einer Nenndauerleistung von nicht mehr als 4 kW und einem Verbrennungsmotor mit einem Hubraum von nicht mehr als 50 cmÂ³ oder einer anderen Antriebsform. DreirÃ¤drige KleinkraftrÃ¤der und vierrÃ¤drige Leichtkraftfahrzeuge mit den gleichen EinschrÃ¤nkungen.'),
('A1', 'KraftrÃ¤der mit einem Hubraum von nicht mehr als 125 cmÂ³ und einer Motorleistung von nicht mehr als 11 kW, bei denen das Leistung-Leergewichts-VerhÃ¤ltnis 0,1 kW/kg nicht Ã¼bersteigt. DreirÃ¤drige Kraftfahrzeuge bis 15 kW.'),
('A2', 'KraftrÃ¤der bis 35 kW Leistung, bei denen das Leistung-Leergewichts-VerhÃ¤ltnis 0,2 kW/kg nicht Ã¼bersteigt und die nicht von einem Kraftrad mit einer Leistung von Ã¼ber 70 kW Motorleistung abgeleitet sind.'),
('A', 'Alle KraftrÃ¤der und dreirÃ¤drige Kraftfahrzeuge.'),
('B', 'Kraftfahrzeuge mit einer zulÃ¤ssigen Gesamtmasse (zGM) von nicht mehr als 3.500 kg und mit nicht mehr als 8 SitzplÃ¤tzen auÃer dem FÃ¼hrersitz (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg oder einem schweren AnhÃ¤nger, sofern die zGM der Kombination 3.500 kg nicht Ã¼bersteigt).'),
('BE', 'Kombinationen aus einem Zugfahrzeug der Klasse B und einem AnhÃ¤nger, sofern die zGM des AnhÃ¤ngers 3.500 kg nicht Ã¼bersteigt.'),
('C1', 'Kraftfahrzeuge mit einer zGM von mehr als 3.500 kg, aber nicht mehr als 7.500 kg und mit nicht mehr als 8 SitzplÃ¤tzen auÃer dem FÃ¼hrersitz (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('C1E', 'Kombinationen aus einem Zugfahrzeug der Klasse C1 und einem AnhÃ¤nger Ã¼ber 750 kg oder der Klasse B und einem AnhÃ¤nger Ã¼ber 3.500 kg, soweit die zGM der Kombination jeweils 12.000 kg nicht Ã¼bersteigt.'),
('C', 'Kraftfahrzeuge mit einer zGM Ã¼ber 3.500 kg und mit nicht mehr als 8 SitzplÃ¤tzen auÃer dem FÃ¼hrersitz (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('CE', 'Kombinationen aus einem Zugfahrzeug der Klasse C und einem AnhÃ¤nger mit einer zGM von mehr als 750 kg.'),
('D1', 'Kraftfahrzeuge bis 8 m LÃ¤nge, die zur BefÃ¶rderung von nicht mehr als 16 Personen auÃer dem FahrzeugfÃ¼hrer ausgelegt und gebaut sind (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('D1E', 'Kombinationen aus einem Zugfahrzeug der Klasse D1 und einem AnhÃ¤nger Ã¼ber 750 kg zGM.'),
('D', 'Kraftfahrzeuge, die zur BefÃ¶rderung von mehr als 8 Personen auÃer dem FahrzeugfÃ¼hrer ausgelegt und gebaut sind (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('DE', 'Kombinationen aus einem Zugfahrzeug der Klasse D und einem AnhÃ¤nger mit einer zGM von mehr als 750 kg.'),
('L', 'Zugmaschinen bis 40 km/h (mit AnhÃ¤ngern bis 25 km/h), die nach ihrer bauartbedingten HÃ¶chstgeschwindigkeit fÃ¼r die Verwendung zu land- oder forstwirtschaftlichen Zwecken bestimmt sind und fÃ¼r solche Zwecke eingesetzt werden.'),
('T', 'Zugmaschinen mit einer bauartbedingten HÃ¶chstgeschwindigkeit bis 60 km/h sowie selbstfahrende Arbeitsmaschinen und Futtermischwagen mit einer bauartbedingten HÃ¶chstgeschwindigkeit bis 40 km/h, die jeweils nach ihrer Bauart fÃ¼r die Verwendung zu land- oder forstwirtschaftlichen Zwecken bestimmt sind und fÃ¼r solche Zwecke eingesetzt werden (jeweils auch mit AnhÃ¤ngern).');


create policy "Everyone can see course_requirements_types" on public.course_requirements_types for select to authenticated using (true);
-- EinfÃ¼gen der FÃ¼hrerscheinklassen
INSERT INTO public.course_requirements_types (type, name, description) VALUES
('THEORY', 'Theorieunterricht', 'Theorieunterricht'),
('PRACTICE', 'Praxisunterricht', 'Praxisunterricht'),
('EXAM', 'PrÃ¼fung', 'PrÃ¼fung'),
('OTHER', 'Sonstiges', 'Sonstiges');













-- Todo: Add the following to another migration file

-- Create a view to show the user's roles
create view public.user_roles_view as 
select 
  users.id,
  users.email,
  users.firstname,
  users.lastname,
  user_roles.role as role
from public.users
join public.user_roles on users.id = user_roles.user_id;

-- /**
--  * REALTIME SUBSCRIPTIONS
--  * Only allow realtime listening on public tables.
--  */

-- begin; 
--   -- remove the realtime publication
--   drop publication if exists supabase_realtime; 

--   -- re-create the publication but don't enable it for any tables
--   create publication supabase_realtime;  
-- commit;

-- -- add tables to the publication
-- alter publication supabase_realtime add table public.organisations;
-- alter publication supabase_realtime add table public.courses;
-- alter publication supabase_realtime add table public.users;

-- /**
--  * HELPER FUNCTIONS
--  * Create test user helper method.
--  */
-- create or replace function public.create_user(
--     email text
-- ) returns uuid
--     security definer
--     set search_path = auth
-- as $$
--   declare
--   user_id uuid;
-- begin
--   user_id := extensions.uuid_generate_v4();
  
--   insert into auth.users (id, email)
--     values (user_id, email)
--     returning id into user_id;

--     return user_id;
-- end;
-- $$ language plpgsql;


-- -- authorize with role-based access control (RBAC)
-- create function public.authorize(
--   requested_permission app_permission
-- )
-- returns boolean as $$
-- declare
--   bind_permissions int;
-- begin
--   select count(*)
--   from public.role_permissions
--   where role_permissions.permission = authorize.requested_permission
--     and role_permissions.role = (auth.jwt() ->> 'user_role')::public.app_role
--   into bind_permissions;
  
--   return bind_permissions > 0;
-- end;
-- $$ language plpgsql security definer set search_path = public;

-- -- Secure the tables
-- alter table public.users enable row level security;
-- alter table public.organisations enable row level security;
-- alter table public.courses enable row level security;
-- alter table public.user_roles enable row level security;
-- alter table public.role_permissions enable row level security;
-- create policy "Allow logged-in read access" on public.users for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.users for insert with check ( auth.uid() = id );
-- create policy "Allow individual update access" on public.users for update using ( auth.uid() = id );
-- create policy "Allow logged-in read access" on public.organisations for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.organisations for insert with check ( auth.uid() = created_by );
-- create policy "Allow individual delete access" on public.organisations for delete using ( auth.uid() = created_by );
-- create policy "Allow authorized delete access" on public.organisations for delete using ( authorize('organisations.delete') );
-- create policy "Allow logged-in read access" on public.courses for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.courses for insert with check ( auth.uid() = user_id );
-- create policy "Allow individual update access" on public.courses for update using ( auth.uid() = user_id );
-- create policy "Allow individual delete access" on public.courses for delete using ( auth.uid() = user_id );
-- create policy "Allow authorized delete access" on public.courses for delete using ( authorize('courses.delete') );
-- create policy "Allow individual read access" on public.user_roles for select using ( auth.uid() = user_id );

-- -- Send "previous data" on change 
-- alter table public.users replica identity full; 
-- alter table public.organisations replica identity full; 
-- alter table public.courses replica identity full;

-- -- inserts a row into public.users and assigns roles
