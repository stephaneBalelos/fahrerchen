create extension if not exists "pgcrypto";
create extension if not exists "pg_net";
-- Custom types
create type public.app_permission as enum (
  'users.read',
  'users.update',
  'users.delete',
  'organizations.read',
  'organizations.create',
  'organizations.update',
  'organizations.delete',
  'organization_members.read',
  'organization_members.create',
  'organization_members.update',
  'organization_members.delete',
  'organization_invitations.read',
  'organization_invitations.create',
  'organization_invitations.update',
  'organization_invitations.delete',
  'students.read',
  'students.create',
  'students.update',
  'students.delete',
  'students_registration_requests.read',
  'students_registration_requests.create',
  'students_registration_requests.update',
  'students_registration_requests.delete',
  'courses.read',
  'courses.create',
  'courses.update',
  'courses.delete',
  'course_subscriptions.read',
  'course_subscriptions.create',
  'course_subscriptions.update',
  'course_subscriptions.delete',
  'course_activities.read',
  'course_activities.create',
  'course_activities.update',
  'course_activities.delete',
  'course_activity_schedules.read',
  'course_activity_schedules.create',
  'course_activity_schedules.update',
  'course_activity_schedules.delete',
  'course_activity_attendances.read',
  'course_activity_attendances.create',
  'course_activity_attendances.update',
  'course_activity_attendances.delete',
  'course_subscription_bills.read',
  'course_subscription_bills.create',
  'course_subscription_bills.update',
  'course_subscription_bills.delete'
);
create type public.app_role as enum ('owner','manager', 'teacher', 'student' );
create type public.user_status as enum ('ONLINE', 'OFFLINE');
create type public.activity_types as enum ('THEORY', 'PRACTICE', 'EXAM', 'OTHER');
create type public.schedule_type as enum ('ONCE', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY');
create type public.schedule_status as enum ('PLANNED', 'COMPLETED', 'CANCELED');
create type public.attendance_status as enum ('REGISTERED', 'ATTENDED', 'CANCELED');

-- enum for fÃ¼hrerscheinklassen
create type public.course_type as enum ('AM', 'A1', 'A2', 'A', 'B', 'BE', 'C1', 'C1E', 'C', 'CE', 'D1', 'D1E', 'D', 'DE', 'L', 'T');


-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
alter table public.role_permissions enable row level security;

-- COURSE TYPES
create table public.course_types (
  id           bigint generated by default as identity primary key,
  type         course_type unique not null,
  description text
);
comment on table public.course_types is 'Course types available.';
alter table public.course_types enable row level security;

-- COURSE ACTIVITY TYPES
create table public.course_activity_types (
  id           bigint generated by default as identity primary key,
  type         activity_types unique not null
);

-- USERS
create table public.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  email       text not null unique,
  firstname    text,
  lastname    text,
  fullname    text generated always as (coalesce(firstname, '') || ' ' || coalesce(lastname, '')) stored,
  avatar_path    text,
  status      user_status default 'OFFLINE'::public.user_status
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';

alter table public.users enable row level security;


-- ORGANIZATIONS
create table public.organizations (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  name          text not null,
  allow_self_registration  boolean default true not null,
  preferred_language    text default 'de' not null,
  address_street  text,
  address_zip    text,
  address_city  text,
  address_country text,
  owner_id      uuid references public.users not null,
  stripe_account_id  text
);
comment on table public.organizations is 'organization data.';

alter table public.organizations enable row level security;

-- ORGANIZATIONS INVITATIONS
create table public.organizations_invitations (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  email         text not null,
  role         app_role not null,
  organization_id    uuid references public.organizations on delete cascade not null,
  status        integer default 0 not null check (status >= 0 and status <= 2), -- 0: pending, 1: accepted, 2: rejected
  unique (email, organization_id) 
);
comment on table public.organizations_invitations is 'Invitations to join an organization.';

alter table public.organizations_invitations enable row level security;


-- ORGANIZATION MEMBERS
create table public.organization_members (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  organization_id    uuid references public.organizations on delete cascade not null,
  user_id    uuid references public.users on delete cascade not null,
  role     app_role not null,
  unique (organization_id, user_id)
);
comment on table public.organization_members is 'Members of each organization, users can be in multiple organizations.';

alter table public.organization_members enable row level security;


-- STUDENTS
create table public.students (
  id          uuid default uuid_generate_v4() primary key,
  email       text not null unique,
  firstname    text not null,
  lastname    text not null,
  birth_date   date not null,
  phone_number  text,
  address_street  text,
  address_zip    text,
  address_city  text,
  address_country text,
  has_a_license  boolean default false not null,
  self_registered  boolean default false not null, -- if the user registered themselves via onboarding
  user_id      uuid references public.users,
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.students is 'Profile data for each student.';

alter table public.students enable row level security;


-- COURSES
create table public.courses (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  name          text not null,
  description       text not null,
  type         integer references public.course_types not null,
  organization_id    uuid references public.organizations on delete cascade not null,
  is_active     boolean default true not null,
  unique (organization_id, type)
);
comment on table public.courses is 'COURSES AVAILABLE.';

alter table public.courses enable row level security;


-- STUDENTS REGISTRATION REQUESTS
create table public.students_registration_requests (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  email         text not null,
  firstname      text not null,
  lastname      text not null,
  birth_date     date not null,
  phone_number    text not null,
  address_street    text not null,
  address_zip      text not null,
  address_city    text not null,
  address_country   text not null,
  has_a_license    boolean default false not null,
  requested_course_id uuid references public.courses on delete set null,
  status        integer default 0 not null check (status >= 0 and status <= 2), -- 0: pending, 1: accepted, 2: rejected
  organization_id    uuid references public.organizations on delete cascade not null,
  unique (email, organization_id)
);
comment on table public.students_registration_requests is 'STUDENTS REGISTRATION REQUESTS.';

alter table public.students_registration_requests enable row level security;

-- COURSE DOCUMENTS
create table public.course_documents (
  id            uuid default uuid_generate_v4() primary key,
  course_id    uuid references public.courses on delete cascade not null,
  name          text,
  description   text,
  path         text not null,
  created_at    timestamp with time zone default timezone('utc'::text, now()) not null,
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.course_documents is 'COURSE DOCUMENTS MADE AVAILABLE FOR STUDENTS.';

-- COURSE REQUIRED DOCUMENTS
create table public.course_required_documents (
  id            uuid default uuid_generate_v4() primary key,
  course_id    uuid references public.courses on delete cascade not null,
  name          text not null,
  name_slug     text generated always as (replace(lower(name), ' ', '_')) stored,
  description   text not null,
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.course_required_documents is 'COURSE REQUIRED DOCUMENTS.';
alter table public.course_required_documents enable row level security;

-- COURSES SUBSCRIPTIONS
create table public.course_subscriptions (
  id            uuid default uuid_generate_v4() primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  course_id    uuid references public.courses on delete cascade not null,
  student_id    uuid references public.students on delete cascade not null,
  archived_at   timestamp with time zone default null,
  organization_id    uuid references public.organizations on delete cascade not null,
  costs        numeric default 0 not null check (costs >= 0),
  unique (course_id, student_id)
);
comment on table public.course_subscriptions is 'COURSES AVAILABLE.';

alter table public.course_subscriptions enable row level security;

-- COURSE SUBSCRIPTION DOCUMENTS
create table public.course_subscription_documents (
  id            uuid default uuid_generate_v4() primary key,
  subscription_id    uuid references public.course_subscriptions on delete cascade not null,
  required_document_id  uuid references public.course_required_documents on delete set null,
  path         text not null,
  created_at    timestamp with time zone default timezone('utc'::text, now()) not null,
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.course_subscription_documents is 'COURSE SUBSCRIPTION DOCUMENTS.';

alter table public.course_subscription_documents enable row level security;


-- COURSE ACTIVITIES
create table public.course_activities (
  id            uuid default uuid_generate_v4() primary key,
  course_id    uuid references public.courses on delete cascade not null,
  name          text not null,
  description   text not null,
  activity_type  integer references public.course_activity_types not null,
  required     integer default 0 not null check (required >= 0),
  price        numeric default 0 not null check (price >= 0),
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.course_activities is 'COURSE ACTIVITIES.';

alter table public.course_activities enable row level security;

-- COURSE ACTIVITY SCHEDULES
create table public.course_activity_schedules (
  id            uuid default uuid_generate_v4() primary key,
  course_id    uuid references public.courses on delete cascade not null,
  activity_id    uuid references public.course_activities on delete cascade not null,
  assigned_to   uuid references public.organization_members on delete set null,
  organization_id    uuid references public.organizations on delete cascade not null,
  status        public.schedule_status default 'PLANNED'::public.schedule_status not null,
  start_at     timestamp with time zone not null,
  end_at       timestamp with time zone not null
);
comment on table public.course_activity_schedules is 'ACTIVITY SCHEDULES.';

alter table public.course_activity_schedules enable row level security;

-- ACTIVITY ATTENDANCES
create table public.course_activity_attendances (
  id            uuid default uuid_generate_v4() primary key,
  course_activity_id   uuid references public.course_activities on delete cascade not null,
  supervisor_id    uuid references public.organization_members on delete set null,
  activity_schedule_id    uuid references public.course_activity_schedules on delete set null,
  course_subscription_id    uuid references public.course_subscriptions on delete cascade not null,
  attended_at   timestamp with time zone default null,
  status        public.attendance_status default 'REGISTERED'::public.attendance_status not null,
  organization_id    uuid references public.organizations on delete cascade not null,
  unique (course_subscription_id, activity_schedule_id)
);
comment on table public.course_activity_attendances is 'ACTIVITY ATTENDANCES.';

alter table public.course_activity_attendances enable row level security;

-- COURSE SUBSCRIPTION BILLS
create table public.course_subscription_bills (
  id            uuid default uuid_generate_v4() primary key,
  course_subscription_id    uuid references public.course_subscriptions on delete cascade not null,
  total        numeric default 0 not null check (total >= 0),
  created_at    timestamp with time zone default timezone('utc'::text, now()) not null,
  paid_at       timestamp with time zone default null,
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.course_subscription_bills is 'COURSE SUBSCRIPTION BILLS.';

alter table public.course_subscription_bills enable row level security;

-- COURSE SUBSCRIPTION BILL ITEMS
create table public.course_subscription_bill_items (
  id            uuid default uuid_generate_v4() primary key,
  bill_id      uuid references public.course_subscription_bills on delete cascade not null,
  course_activity_attendance_id    uuid references public.course_activity_attendances on delete set null,
  course_activity_id    uuid references public.course_activities on delete set null,
  description   text not null,
  price       numeric default 0 not null check (price >= 0),
  canceled_at   timestamp with time zone default null,
  organization_id    uuid references public.organizations on delete cascade not null
);
comment on table public.course_subscription_bill_items is 'COURSE SUBSCRIPTION BILL ITEMS.';
alter table public.course_subscription_bill_items enable row level security;


-- Bill Items View grouped by course_activity_id
create or replace view public.course_subscription_bill_items_view as
select
  course_activity.name as activity_name,
  course_activity.description as activity_description,
  bill_id,
  array_agg(bill_items) as items,
  sum(bill_items.price) as total
from public.course_subscription_bill_items as bill_items
left join public.course_activities as course_activity on bill_items.course_activity_id = course_activity.id
group by course_activity_id, activity_name, activity_description, bill_id;


-- Organisation Public View - Joining with courses as array
create or replace view public.organizations_view as
select
  organizations.id,
  organizations.name,
  organizations.address_street,
  organizations.address_zip,
  organizations.address_city,
  organizations.address_country,
  organizations.owner_id,
  organizations.allow_self_registration,
  organizations.preferred_language,
  users.email as owner_email,
  users.firstname as owner_firstname,
  users.lastname as owner_lastname,
  courses as organization_courses
from public.organizations
left join (
  select
    courses.organization_id,
    jsonb_agg(jsonb_build_object(
      'id', courses.id,
      'name', courses.name,
      'description', courses.description,
      'type', courses.type,
      'is_active', courses.is_active
    )) as courses
  from public.courses
  group by courses.organization_id
) as courses on organizations.id = courses.organization_id
left join public.users on organizations.owner_id = users.id;



-- TRIGGERS
create function public.handle_new_user() 
returns trigger as $$
declare org_id uuid;
declare role_name public.app_role;
begin
  insert into public.users (id, email)
  values (new.id, new.email);

  return new;
end;
$$ language plpgsql security definer set search_path = auth, public;
-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();



create or replace function public.handle_new_organization() 
returns trigger as $$
declare org_id uuid;
begin

  insert into public.organization_members (organization_id, user_id, role)
  values (new.id, new.owner_id, 'owner');

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a Org is created
create trigger on_org_created
  after insert on public.organizations
  for each row execute procedure public.handle_new_organization();


create or replace function public.handle_new_course()
returns trigger as $$
declare org_id uuid;
begin
  org_id := new.organization_id;

  insert into public.course_activities (course_id, name, description, activity_type, required, price, organization_id)
  values (new.id, 'Theorieunterricht', 'Theorieunterricht', 1, 12, 45, org_id),
         (new.id, 'Ãbungstunde', 'Praxisunterricht', 2, 15, 64, org_id),
         (new.id, 'Sonderfahrt', 'Praxisunterricht', 2, 8, 70, org_id),
         (new.id, 'Praktische PrÃ¼fung', 'VorstellungsgebÃ¼hr', 3, 1, 55, org_id),
         (new.id, 'Beispeil Workshop', 'Kostenloser Workshop', 4, 0, 0, org_id);

  insert into public.course_required_documents (course_id, name, description, organization_id)
  values (new.id, 'Personalausweis', 'Personalausweis', org_id),
         (new.id, 'Sehtest', 'Sehtest', org_id),
         (new.id, 'Passbild', 'Passbild', org_id),
         (new.id, 'Erste Hilfe Kurs', 'Erste Hilfe Kurs', org_id);

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a course is created
create trigger on_course_created
  after insert on public.courses
  for each row execute procedure public.handle_new_course();


-- handle Registration Request confirmation
create or replace function public.handle_registration_request_confirmation()
returns trigger as $$
declare org_id uuid;
begin
  org_id := new.organization_id;

  -- prevent updating the status to PENDING
  if new.status = 0 then
    raise exception 'Status cannot be set to PENDING';
  end if;

  -- if the status is ACCEPTED, insert the student
  if new.status = 1 then
    insert into public.students (email, firstname, lastname, birth_date, phone_number, address_street, address_zip, address_city, address_country, has_a_license, organization_id)
    values (new.email, new.firstname, new.lastname, new.birth_date, new.phone_number, new.address_street, new.address_zip, new.address_city, new.address_country, new.has_a_license, org_id);
  end if;

  return new;
end;
$$ language plpgsql security invoker set search_path = public;
-- trigger the function every time a registration request is updated
create trigger on_registration_request_updated
  after update of status on public.students_registration_requests
  for each row execute procedure public.handle_registration_request_confirmation();


-- Handle New Invitations
create or replace function public.handle_new_invitation()
returns trigger as $$
declare
  payload jsonb;
  invited_user_id uuid;
begin

  -- check if user already exists
  select id into invited_user_id from public.users where email = new.email;

  -- if user exist, check if the user is already a member of the organization
  if invited_user_id is not null then
    if exists (select 1 from public.organization_members where user_id = invited_user_id and organization_id = new.organization_id) then
      raise exception 'User is already a member of the organization';
    end if;

    -- insert the user as a member of the organization
    insert into public.organization_members (organization_id, user_id, role)
    values (new.organization_id, invited_user_id, new.role);
  end if;


  -- generate payload
  payload := jsonb_build_object(
    'type', 'organizations_invitations.create',
    'data', jsonb_build_object(
      'id', new.id,
      'email', new.email,
      'organization_id', new.organization_id,
      'role', new.role,
      'inserted_at', new.inserted_at
      'invited_user_id', invited_user_id
    )
  );

  -- send the payload to the webhook
  perform public.send_transactional_email(message_id := new.id, payload := payload);

  return NEW;

end;
$$ language plpgsql security invoker set search_path = public, extensions, net;
create or replace trigger new_invitation_webhook
after insert on public.organizations_invitations
for each row
execute function public.handle_new_invitation();



-- handle new activity attendance
create or replace function public.handle_new_activity_attendance()
returns trigger as $$
declare org_id uuid;
declare bill_id uuid;
declare activity_price numeric;
declare activity_name text;
begin
  org_id := new.organization_id;

  -- lookup if a bill already exists for the course subscription and has not been paid
  select id into bill_id from public.course_subscription_bills
  where course_subscription_id = new.course_subscription_id and paid_at is null;

  -- if no bill exists, create a new one
  if bill_id is null then
    insert into public.course_subscription_bills (course_subscription_id, organization_id)
    values (new.course_subscription_id, org_id)
    returning id into bill_id;
  end if;

  -- lookup the activity name & price
  select name, price into activity_name, activity_price from public.course_activities where id = new.course_activity_id;

  -- insert the bill item
  insert into public.course_subscription_bill_items (bill_id, course_activity_attendance_id, course_activity_id, description, price, organization_id)
  values (bill_id, new.id, new.course_activity_id, activity_name, activity_price, org_id);

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a course activity attendance is created
create trigger on_course_activity_attendance_created
  after insert on public.course_activity_attendances
  for each row execute procedure public.handle_new_activity_attendance();


-- handle new Bill Item
create or replace function public.handle_new_bill_item()
returns trigger as $$
declare org_id uuid;
declare bill_total numeric;
begin
  org_id := new.organization_id;

  select sum(price) into bill_total from public.course_subscription_bill_items where bill_id = new.bill_id;

  -- Aggragate the total of the bill
  update public.course_subscription_bills set total = bill_total
  where id = new.bill_id;

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a course subscription bill item is created
create trigger on_course_subscription_bill_item_created
  after insert on public.course_subscription_bill_items
  for each row execute procedure public.handle_new_bill_item();


-- hnadle attendance status change
create or replace function public.handle_attendance_status_change()
returns trigger as $$
declare org_id uuid;
declare bill_paid boolean;
begin
  org_id := new.organization_id;

  -- prevent resetting the status to REGISTERED
  if new.status = 'REGISTERED' then
    raise exception 'Status cannot be reset to REGISTERED';
  end if;

  -- if the status is ATTENDED, update the bill item to be paid
  if new.status = 'ATTENDED' then
    update public.course_subscription_bill_items set canceled_at = null
    where id = new.id;
  end if;

  -- if the status is CANCELED, update the bill item to be canceled
  if new.status = 'CANCELED' then
    update public.course_subscription_bill_items set canceled_at = timezone('utc'::text, now())
    where id = new.id;
  end if;

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a course activity attendance's status is updated
create trigger on_course_activity_attendance_status_updated
  after update of status on public.course_activity_attendances
  for each row execute procedure public.handle_attendance_status_change();





-- Helpers Functions
create or replace function public.authorize(
  requested_permission app_permission,
  org_id uuid
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Fetch user role once and store it to reduce number of calls
  select role into user_role from public.organization_members where organization_id = org_id and user_id = auth.uid() limit 1;

  if user_role is null then
    return false;
  end if;

  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
    and role_permissions.role = user_role;

  return bind_permissions > 0;
end;
$$ language plpgsql security definer set search_path = '';

-- prevent update of the primrary key & strioe_account_id of an organization
create or replace function public.prevent_organization_update()
returns trigger as $$
begin
  if old.id <> new.id then
    raise exception 'Cannot update the primary key of an organization';
  end if;

  if old.stripe_account_id <> new.stripe_account_id then
    raise exception 'Cannot update stripe_account_id of an organization';
  end if;

  return new;
end;
$$ language plpgsql security definer set search_path = public;
-- trigger the function every time a organization is updated
create trigger on_organization_update
  before update on public.organizations
  for each row execute procedure public.prevent_organization_update();



-- Policies

-- Role Permissions Policies
create policy "Everyone can see role_permissions" on public.role_permissions for select to authenticated using (true);

-- Users Policies
create policy "Everyone can see users" on public.users for select to authenticated using (true);
create policy "User can see update their own data" on public.users for update to authenticated using (auth.uid() = id);


-- Organizations Policies
create policy "Everyone member can see organizations" on public.organizations for select to authenticated, anon using (public.authorize('organizations.read', id));
insert into public.role_permissions (role, permission) values ('owner', 'organizations.read');
insert into public.role_permissions (role, permission) values ('manager', 'organizations.read');
insert into public.role_permissions (role, permission) values ('teacher', 'organizations.read');
insert into public.role_permissions (role, permission) values ('student', 'organizations.read');

create policy "Owner & Manager can update organizations" on public.organizations for update to authenticated using ((auth.uid() = owner_id) or (public.authorize('organizations.update', id)));
insert into public.role_permissions (role, permission) values ('owner', 'organizations.update');
insert into public.role_permissions (role, permission) values ('manager', 'organizations.update');

create policy "Create organization only if owner is the same as the user who make the request" on public.organizations for insert to authenticated with check (auth.uid() = owner_id);


-- Organization Members Policies
create policy "Every Member can see organization_members" on public.organization_members for select to authenticated using (public.authorize('organization_members.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_members.read');
insert into public.role_permissions (role, permission) values ('manager', 'organization_members.read');
insert into public.role_permissions (role, permission) values ('teacher', 'organization_members.read');
insert into public.role_permissions (role, permission) values ('student', 'organization_members.read');

create policy "Owner & Manager can insert organization_members" on public.organization_members for insert to authenticated with check (public.authorize('organization_members.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_members.create');
insert into public.role_permissions (role, permission) values ('manager', 'organization_members.create');

create policy "Owner can update organization_members" on public.organization_members for update to authenticated using (public.authorize('organization_members.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_members.update');

create policy "Owner can delete organization_members" on public.organization_members for delete to authenticated using ((public.authorize('organization_members.delete', organization_id)) or (auth.uid() = user_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_members.delete');


-- Organizations Invitations Policies
create policy "User can see their own organization_invitations" on public.organizations_invitations for select to authenticated using (auth.email() = email);
create policy "Owner & Manager see organization_invitations" on public.organizations_invitations for select to authenticated using (public.authorize('organization_invitations.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_invitations.read');
insert into public.role_permissions (role, permission) values ('manager', 'organization_invitations.read');

create policy "Owner & Manager can insert organization_invitations" on public.organizations_invitations for insert to authenticated with check (public.authorize('organization_invitations.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_invitations.create');
insert into public.role_permissions (role, permission) values ('manager', 'organization_invitations.create');

create policy "Owner & Manager can update organization_invitations" on public.organizations_invitations for update to authenticated using (public.authorize('organization_invitations.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_invitations.update');
insert into public.role_permissions (role, permission) values ('manager', 'organization_invitations.update');

create policy "Owner & Manager can delete organization_invitations" on public.organizations_invitations for delete to authenticated using (public.authorize('organization_invitations.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'organization_invitations.delete');
insert into public.role_permissions (role, permission) values ('manager', 'organization_invitations.delete');


-- Students Policies
create policy "Student can see their own data" on public.students for select to authenticated using (auth.uid() = user_id);
create policy "Everyone except students can see other students" on public.students for select to authenticated using (public.authorize('students.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.read');
insert into public.role_permissions (role, permission) values ('manager', 'students.read');
insert into public.role_permissions (role, permission) values ('teacher', 'students.read');

create policy "Owner & Manager can insert students" on public.students for insert to authenticated with check (public.authorize('students.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.create');
insert into public.role_permissions (role, permission) values ('manager', 'students.create');

create policy "Owner & Manager can update students" on public.students for update to authenticated using (public.authorize('students.update', organization_id)) with check (public.authorize('students.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.update');
insert into public.role_permissions (role, permission) values ('manager', 'students.update');

create policy "Owner & Manager can delete students" on public.students for delete to authenticated using (public.authorize('students.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students.delete');
insert into public.role_permissions (role, permission) values ('manager', 'students.delete');


-- Students Registration Requests Policies
create policy "Everyone authenticated staff user can see students_registration_requests" on public.students_registration_requests for select to authenticated using (public.authorize('students_registration_requests.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students_registration_requests.read');
insert into public.role_permissions (role, permission) values ('manager', 'students_registration_requests.read');
insert into public.role_permissions (role, permission) values ('teacher', 'students_registration_requests.read');

create policy "Insert students_registration_requests" on public.students_registration_requests for insert to authenticated, anon with check (true);

create policy "Owner & Manager can update students_registration_requests" on public.students_registration_requests for update to authenticated using (public.authorize('students_registration_requests.update', organization_id)) with check (public.authorize('students_registration_requests.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students_registration_requests.update');
insert into public.role_permissions (role, permission) values ('manager', 'students_registration_requests.update');

create policy "Owner & Manager can delete students_registration_requests" on public.students_registration_requests for delete to authenticated using (public.authorize('students_registration_requests.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'students_registration_requests.delete');
insert into public.role_permissions (role, permission) values ('manager', 'students_registration_requests.delete');


-- Courses Policies
create policy "Everyone can see courses" on public.courses for select to authenticated using (public.authorize('courses.read', organization_id));
create policy "Everyone can see courses_documents" on public.course_documents for select to authenticated using (public.authorize('courses.read', organization_id));
create policy "Everyone can see course_required_documents" on public.course_required_documents for select to authenticated using (public.authorize('courses.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.read');
insert into public.role_permissions (role, permission) values ('manager', 'courses.read');
insert into public.role_permissions (role, permission) values ('teacher', 'courses.read');
insert into public.role_permissions (role, permission) values ('student', 'courses.read');

create policy "Owner, Manager can insert courses" on public.courses for insert to authenticated with check (public.authorize('courses.create', organization_id));
create policy "Owner, Manager can insert courses_documents" on public.course_documents for insert to authenticated with check (public.authorize('courses.create', organization_id));
create policy "Owner, Manager can insert course_required_documents" on public.course_required_documents for insert to authenticated with check (public.authorize('courses.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.create');
insert into public.role_permissions (role, permission) values ('manager', 'courses.create');

create policy "Owner & Manager can update courses" on public.courses for update to authenticated using (public.authorize('courses.update', organization_id)) with check (public.authorize('courses.update', organization_id));
create policy "Owner & Manager can update courses_documents" on public.course_documents for update to authenticated using (public.authorize('courses.update', organization_id)) with check (public.authorize('courses.update', organization_id));
create policy "Owner & Manager can update course_required_documents" on public.course_required_documents for update to authenticated using (public.authorize('courses.update', organization_id)) with check (public.authorize('courses.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.update');
insert into public.role_permissions (role, permission) values ('manager', 'courses.update');

create policy "Owner & Manager can delete courses" on public.courses for delete to authenticated using (public.authorize('courses.delete', organization_id));
create policy "Owner & Manager can delete courses_documents" on public.course_documents for delete to authenticated using (public.authorize('courses.delete', organization_id));
create policy "Owner & Manager can delete course_required_documents" on public.course_required_documents for delete to authenticated using (public.authorize('courses.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'courses.delete');


-- Course Subscriptions Policies
create policy "Everyone can see course_subscriptions" on public.course_subscriptions for select to authenticated using (public.authorize('course_subscriptions.read', organization_id));
create policy "Everyone can see course_subscription_documents" on public.course_subscription_documents for select to authenticated using (public.authorize('course_subscriptions.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscriptions.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_subscriptions.read');
insert into public.role_permissions (role, permission) values ('student', 'course_subscriptions.read');

create policy "Owner, Manager can insert course_subscriptions" on public.course_subscriptions for insert to authenticated with check (public.authorize('course_subscriptions.create', organization_id));
create policy "Owner, Manager can insert course_subscription_documents" on public.course_subscription_documents for insert to authenticated with check (public.authorize('course_subscriptions.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscriptions.create');

create policy "Owner & Manager can update course_subscriptions" on public.course_subscriptions for update to authenticated using (public.authorize('course_subscriptions.update', organization_id)) with check (public.authorize('course_subscriptions.update', organization_id));
create policy "Owner & Manager can update course_subscription_documents" on public.course_subscription_documents for update to authenticated using (public.authorize('course_subscriptions.update', organization_id)) with check (public.authorize('course_subscriptions.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscriptions.update');

create policy "Owner & Manager can delete course_subscriptions" on public.course_subscriptions for delete to authenticated using (public.authorize('course_subscriptions.delete', organization_id));
create policy "Owner & Manager can delete course_subscription_documents" on public.course_subscription_documents for delete to authenticated using (public.authorize('course_subscriptions.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscriptions.delete');


-- Course Activities Policies
create policy "Everyone can see course_activities" on public.course_activities for select to authenticated using (public.authorize('course_activities.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_activities.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activities.read');
insert into public.role_permissions (role, permission) values ('student', 'course_activities.read');

create policy "Owner, Manager can insert course_activities" on public.course_activities for insert to authenticated with check (public.authorize('course_activities.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_activities.create');

create policy "Owner & Manager can update course_activities" on public.course_activities for update to authenticated using (public.authorize('course_activities.update', organization_id)) with check (public.authorize('course_activities.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_activities.update');

create policy "Owner can delete course_activities" on public.course_activities for delete to authenticated using (public.authorize('course_activities.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activities.delete');

-- Course Activity Schedules Policies
create policy "Everyone can see course_activity_schedules" on public.course_activity_schedules for select to authenticated using (public.authorize('course_activity_schedules.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.read');
insert into public.role_permissions (role, permission) values ('student', 'course_activity_schedules.read');

create policy "Owner, Manager & Teacher can insert course_activity_schedules" on public.course_activity_schedules for insert to authenticated with check (public.authorize('course_activity_schedules.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.create');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.create');

create policy "Owner, Manager & Teacher can update course_activity_schedules" on public.course_activity_schedules for update to authenticated using (public.authorize('course_activity_schedules.update', organization_id)) with check (public.authorize('course_activity_schedules.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.update');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.update');

create policy "Owner, Manger % Teacher can delete course_activity_schedules" on public.course_activity_schedules for delete to authenticated using (public.authorize('course_activity_schedules.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_schedules.delete');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_schedules.delete');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_schedules.delete');


-- Course Activity Attendances Policies
create policy "Everyone can see course_activity_attendances" on public.course_activity_attendances for select to authenticated using (public.authorize('course_activity_attendances.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_attendances.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_activity_attendances.read');
insert into public.role_permissions (role, permission) values ('student', 'course_activity_attendances.read');

create policy "Owner, Manager can insert course_activity_attendances" on public.course_activity_attendances for insert to authenticated with check (public.authorize('course_activity_attendances.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_attendances.create');

create policy "Owner & Manager can update course_activity_attendances" on public.course_activity_attendances for update to authenticated using (public.authorize('course_activity_attendances.update', organization_id)) with check (public.authorize('course_activity_attendances.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_activity_attendances.update');

create policy "Owner can delete course_activity_attendances" on public.course_activity_attendances for delete to authenticated using (public.authorize('course_activity_attendances.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_activity_attendances.delete');


-- Course Subscription Bills Policies
create policy "Everyone can see course_subscription_bills" on public.course_subscription_bills for select to authenticated using (public.authorize('course_subscription_bills.read', organization_id));
create policy "Everyone can see course_subscription_bill_items" on public.course_subscription_bill_items for select to authenticated using (public.authorize('course_subscription_bills.read', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.read');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscription_bills.read');
insert into public.role_permissions (role, permission) values ('teacher', 'course_subscription_bills.read');
insert into public.role_permissions (role, permission) values ('student', 'course_subscription_bills.read');

create policy "Owner, Manager can insert course_subscription_bills" on public.course_subscription_bills for insert to authenticated with check (public.authorize('course_subscription_bills.create', organization_id));
create policy "Owner, Manager can insert course_subscription_bill_items" on public.course_subscription_bill_items for insert to authenticated with check (public.authorize('course_subscription_bills.create', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.create');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscription_bills.create');

create policy "Owner & Manager can update course_subscription_bills" on public.course_subscription_bills for update to authenticated using (public.authorize('course_subscription_bills.update', organization_id)) with check (public.authorize('course_subscription_bills.update', organization_id));
create policy "Owner & Manager can update course_subscription_bill_items" on public.course_subscription_bill_items for update to authenticated using (public.authorize('course_subscription_bills.update', organization_id)) with check (public.authorize('course_subscription_bills.update', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.update');
insert into public.role_permissions (role, permission) values ('manager', 'course_subscription_bills.update');

create policy "Owner can delete course_subscription_bills" on public.course_subscription_bills for delete to authenticated using (public.authorize('course_subscription_bills.delete', organization_id));
create policy "Owner can delete course_subscription_bill_items" on public.course_subscription_bill_items for delete to authenticated using (public.authorize('course_subscription_bills.delete', organization_id));
insert into public.role_permissions (role, permission) values ('owner', 'course_subscription_bills.delete');


create policy "Everyone can see course_types" on public.course_types for select to authenticated using (true);
-- EinfÃ¼gen der FÃ¼hrerscheinklassen
INSERT INTO public.course_types (type, description) VALUES
('AM', 'Leichte zweirÃ¤drige Kraftfahrzeuge mit einer HÃ¶chstgeschwindigkeit von nicht mehr als 45 km/h, einer Nenndauerleistung von nicht mehr als 4 kW und einem Verbrennungsmotor mit einem Hubraum von nicht mehr als 50 cmÂ³ oder einer anderen Antriebsform. DreirÃ¤drige KleinkraftrÃ¤der und vierrÃ¤drige Leichtkraftfahrzeuge mit den gleichen EinschrÃ¤nkungen.'),
('A1', 'KraftrÃ¤der mit einem Hubraum von nicht mehr als 125 cmÂ³ und einer Motorleistung von nicht mehr als 11 kW, bei denen das Leistung-Leergewichts-VerhÃ¤ltnis 0,1 kW/kg nicht Ã¼bersteigt. DreirÃ¤drige Kraftfahrzeuge bis 15 kW.'),
('A2', 'KraftrÃ¤der bis 35 kW Leistung, bei denen das Leistung-Leergewichts-VerhÃ¤ltnis 0,2 kW/kg nicht Ã¼bersteigt und die nicht von einem Kraftrad mit einer Leistung von Ã¼ber 70 kW Motorleistung abgeleitet sind.'),
('A', 'Alle KraftrÃ¤der und dreirÃ¤drige Kraftfahrzeuge.'),
('B', 'Kraftfahrzeuge mit einer zulÃ¤ssigen Gesamtmasse (zGM) von nicht mehr als 3.500 kg und mit nicht mehr als 8 SitzplÃ¤tzen auÃer dem FÃ¼hrersitz (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg oder einem schweren AnhÃ¤nger, sofern die zGM der Kombination 3.500 kg nicht Ã¼bersteigt).'),
('BE', 'Kombinationen aus einem Zugfahrzeug der Klasse B und einem AnhÃ¤nger, sofern die zGM des AnhÃ¤ngers 3.500 kg nicht Ã¼bersteigt.'),
('C1', 'Kraftfahrzeuge mit einer zGM von mehr als 3.500 kg, aber nicht mehr als 7.500 kg und mit nicht mehr als 8 SitzplÃ¤tzen auÃer dem FÃ¼hrersitz (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('C1E', 'Kombinationen aus einem Zugfahrzeug der Klasse C1 und einem AnhÃ¤nger Ã¼ber 750 kg oder der Klasse B und einem AnhÃ¤nger Ã¼ber 3.500 kg, soweit die zGM der Kombination jeweils 12.000 kg nicht Ã¼bersteigt.'),
('C', 'Kraftfahrzeuge mit einer zGM Ã¼ber 3.500 kg und mit nicht mehr als 8 SitzplÃ¤tzen auÃer dem FÃ¼hrersitz (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('CE', 'Kombinationen aus einem Zugfahrzeug der Klasse C und einem AnhÃ¤nger mit einer zGM von mehr als 750 kg.'),
('D1', 'Kraftfahrzeuge bis 8 m LÃ¤nge, die zur BefÃ¶rderung von nicht mehr als 16 Personen auÃer dem FahrzeugfÃ¼hrer ausgelegt und gebaut sind (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('D1E', 'Kombinationen aus einem Zugfahrzeug der Klasse D1 und einem AnhÃ¤nger Ã¼ber 750 kg zGM.'),
('D', 'Kraftfahrzeuge, die zur BefÃ¶rderung von mehr als 8 Personen auÃer dem FahrzeugfÃ¼hrer ausgelegt und gebaut sind (auch mit AnhÃ¤nger mit einer zGM von nicht mehr als 750 kg).'),
('DE', 'Kombinationen aus einem Zugfahrzeug der Klasse D und einem AnhÃ¤nger mit einer zGM von mehr als 750 kg.'),
('L', 'Zugmaschinen bis 40 km/h (mit AnhÃ¤ngern bis 25 km/h), die nach ihrer bauartbedingten HÃ¶chstgeschwindigkeit fÃ¼r die Verwendung zu land- oder forstwirtschaftlichen Zwecken bestimmt sind und fÃ¼r solche Zwecke eingesetzt werden.'),
('T', 'Zugmaschinen mit einer bauartbedingten HÃ¶chstgeschwindigkeit bis 60 km/h sowie selbstfahrende Arbeitsmaschinen und Futtermischwagen mit einer bauartbedingten HÃ¶chstgeschwindigkeit bis 40 km/h, die jeweils nach ihrer Bauart fÃ¼r die Verwendung zu land- oder forstwirtschaftlichen Zwecken bestimmt sind und fÃ¼r solche Zwecke eingesetzt werden (jeweils auch mit AnhÃ¤ngern).');


create policy "Everyone can see course_activity_types" on public.course_activity_types for select to authenticated using (true);
-- EinfÃ¼gen der Kurs AktivitÃ¤tstypen
INSERT INTO public.course_activity_types (type) VALUES
('THEORY'),
('PRACTICE'),
('EXAM'),
('OTHER');













-- Todo: Add the following to another migration file

-- Create a view to show the user's roles


-- /**
--  * REALTIME SUBSCRIPTIONS
--  * Only allow realtime listening on public tables.
--  */

-- begin; 
--   -- remove the realtime publication
--   drop publication if exists supabase_realtime; 

--   -- re-create the publication but don't enable it for any tables
--   create publication supabase_realtime;  
-- commit;

-- -- add tables to the publication
-- alter publication supabase_realtime add table public.organizations;
-- alter publication supabase_realtime add table public.courses;
-- alter publication supabase_realtime add table public.users;

-- /**
--  * HELPER FUNCTIONS
--  * Create test user helper method.
--  */
-- create or replace function public.create_user(
--     email text
-- ) returns uuid
--     security definer
--     set search_path = auth
-- as $$
--   declare
--   user_id uuid;
-- begin
--   user_id := extensions.uuid_generate_v4();
  
--   insert into auth.users (id, email)
--     values (user_id, email)
--     returning id into user_id;

--     return user_id;
-- end;
-- $$ language plpgsql;


-- -- authorize with role-based access control (RBAC)
-- create function public.authorize(
--   requested_permission app_permission
-- )
-- returns boolean as $$
-- declare
--   bind_permissions int;
-- begin
--   select count(*)
--   from public.role_permissions
--   where role_permissions.permission = authorize.requested_permission
--     and role_permissions.role = (auth.jwt() ->> 'user_role')::public.app_role
--   into bind_permissions;
  
--   return bind_permissions > 0;
-- end;
-- $$ language plpgsql security definer set search_path = public;

-- -- Secure the tables
-- alter table public.users enable row level security;
-- alter table public.organizations enable row level security;
-- alter table public.courses enable row level security;
-- alter table public.user_roles enable row level security;
-- alter table public.role_permissions enable row level security;
-- create policy "Allow logged-in read access" on public.users for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.users for insert with check ( auth.uid() = id );
-- create policy "Allow individual update access" on public.users for update using ( auth.uid() = id );
-- create policy "Allow logged-in read access" on public.organizations for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.organizations for insert with check ( auth.uid() = created_by );
-- create policy "Allow individual delete access" on public.organizations for delete using ( auth.uid() = created_by );
-- create policy "Allow authorized delete access" on public.organizations for delete using ( authorize('organizations.delete') );
-- create policy "Allow logged-in read access" on public.courses for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.courses for insert with check ( auth.uid() = user_id );
-- create policy "Allow individual update access" on public.courses for update using ( auth.uid() = user_id );
-- create policy "Allow individual delete access" on public.courses for delete using ( auth.uid() = user_id );
-- create policy "Allow authorized delete access" on public.courses for delete using ( authorize('courses.delete') );
-- create policy "Allow individual read access" on public.user_roles for select using ( auth.uid() = user_id );

-- -- Send "previous data" on change 
-- alter table public.users replica identity full; 
-- alter table public.organizations replica identity full; 
-- alter table public.courses replica identity full;

-- -- inserts a row into public.users and assigns roles
